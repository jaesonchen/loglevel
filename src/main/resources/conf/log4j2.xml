<?xml version="1.0" encoding="UTF-8" ?>

<!-- 日志优先级：OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE -->

<!-- Configuration
	status: 用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出。 
    monitorInterval: Log4j能够自动检测修改配置 文件和重新配置本身，设置检测间隔秒数。
-->
<Configuration status="WARN" monitorInterval="300">

	<!-- propterties 属性设置，用于设置日志文件路径和文件名 -->
	<properties>
		<property name="LOG_HOME">${sys:catalina.home}/logs</property>
        <property name="FILE_NAME">loglevel</property>
	</properties>

<!--  输出源(Appenders)
	ConsoleAppender(控制台): 输出结果到System.out或是System.err。
	FileAppender：输出结果到指定文件，同时可以指定输出数据的格式。append=“false”不追加到文件末尾。
	RollingFileAppender: 自动追加日志信息到文件中，直至文件达到预定的大小，然后自动重新生成另外一个文件来记录之后的日志。
	RollingRandomAccessFileAppender: 
-->

<!-- 输出格式(PatternLayout)
	%d{HH:mm:ss.SSS} 表示输出到毫秒的时间
	%d{yyyy-MM-dd HH:mm:ss.SSS} 带日期
	%t 输出当前线程名称
	%-5level 输出日志级别，-5表示左对齐并且固定输出5个字符，如果不足在右边补空格
	%logger 输出logger名称，因为Root Logger没有名称，所以没有输出
	%msg 日志文本
	%n 换行
	%F 输出所在的类文件名，如Client.java
	%L 输出行号
	%M 输出所在方法名
	%l  输出语句所在的行数, 包括类名、方法名、文件名、行数
--> 

	<Appenders>
	
		<!-- 定义控制台输出 -->
		<Console name="Console" target="SYSTEM_OUT">
			<PatternLayout pattern="%d{HH:mm:ss.SSS} %X{REQUEST_ID} %-5level %logger{36}.%M(line:%line) - %msg%n" />
			<!--控制台只输出level及以上级别的信息（onMatch），其他的拒绝（onMismatch）-->
			<ThresholdFilter level="DEBUG" onMatch="ACCEPT" onMismatch="DENY" />
		</Console>
		
		<!-- 输出到指定文件，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档。
			fileName  指定当前日志文件的位置和文件名称
			filePattern  指定当发生Rolling时，文件的转移和重命名规则
			append 默认为true，设为false表示每次运行程序会自动清空log文件内容 -->
		<RollingRandomAccessFile name="RollingFile" 
			fileName="${LOG_HOME}/${FILE_NAME}.log" 
			filePattern="${LOG_HOME}/$${date:yyyy-MM}/${FILE_NAME}-%d{yyyy-MM-dd}-%i.log">
			<PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36}.%M(line:%line) - %msg%n" />
			<!-- 只输出info级别以上的日志 -->
			<ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY" />
			<Policies>
				<!-- TimeBasedTriggeringPolicy  这个配置需要和filePattern结合使用，filePattern中配置的文件重命名规则是${FILE_NAME}-%d{yyyy-MM-dd}-%i.log，
					最小的时间粒度是dd，即天，TimeBasedTriggeringPolicy指定的size是1，结合起来就是每1天生成一个新文件。
					如果改成%d{yyyy-MM-dd HH}，最小粒度为小时，则每一个小时生成一个文件。 -->
				<TimeBasedTriggeringPolicy interval="1" />
				<!-- SizeBasedTriggeringPolicy  指定当文件体积大于size指定的值时，触发Rolling -->
				<SizeBasedTriggeringPolicy size="10 MB" />
			</Policies>
			<!-- DefaultRolloverStrategy 指定最多保存的文件个数，如不设置，则默认为最多同一文件夹下7个文件。 -->
			<DefaultRolloverStrategy max="20" />
		</RollingRandomAccessFile>

		<RollingRandomAccessFile name="ErrorFile" 
			fileName="${LOG_HOME}/error.log" 
			filePattern="${LOG_HOME}/$${date:yyyy-MM}/error-%d{yyyy-MM-dd HH-mm}-%i.log">
			<PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36}.%M(line:%line) - %msg%n" />
			<!-- 只输出warn和error级别的日志，不输出fatal级别日志，NEUTRAL表示继续进行其他的filter匹配 -->
			<Filters>
                <ThresholdFilter level="FATAL" onMatch="DENY" onMismatch="NEUTRAL" />
                <ThresholdFilter level="ERROR" onMatch="ACCEPT" onMismatch="DENY" />
            </Filters>
			<Policies>
				<TimeBasedTriggeringPolicy interval="1" />
				<SizeBasedTriggeringPolicy size="10 MB" />
			</Policies>
			<DefaultRolloverStrategy max="20" />
		</RollingRandomAccessFile>
		
		<RollingRandomAccessFile name="AopFile" 
			fileName="${LOG_HOME}/aop.log" 
			filePattern="${LOG_HOME}/$${date:yyyy-MM}/aop-%d{yyyy-MM-dd}-%i.log">
			<PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level [%file:%line] - %msg%n" />
			<ThresholdFilter level="WARN" onMatch="ACCEPT" onMismatch="DENY" />
			<Policies>
				<TimeBasedTriggeringPolicy interval="1" />
				<SizeBasedTriggeringPolicy size="10 MB" />
			</Policies>
			<DefaultRolloverStrategy max="20" />
		</RollingRandomAccessFile>
	</Appenders>
	
	<Loggers>
	 	<!---通过<logger/>的定义可以将各个包中的类日志输出到不同的日志文件中-->
	 	<!-- additivity 是否输出到顶层root定义的Appender中，默认true  -->
		<Logger name="org.springframework" level="INFO" additivity="false">
			<AppenderRef ref="Console" />
		</Logger>

		<Logger name="com.asiainfo.log.aop" level="INFO" additivity="false">
	        <AppenderRef ref="AopFile" />
	    </Logger>
	    
	    <Logger name="com.asiainfo.log.service" level="DEBUG" />

	    <Logger name="com.asiainfo.log.dao" level="WARN" />

		<!-- 默认会自动构建一个 root,输出日志到控制台，供logger继承 -->
		<Root level="DEBUG">
			<AppenderRef ref="Console" />
			<AppenderRef ref="RollingFile" />
			<AppenderRef ref="ErrorFile" />
		</Root>
	</Loggers>
</Configuration>